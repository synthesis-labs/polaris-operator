/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/synthesis-labs/polaris-operator/pkg/apis/polaris/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolarisStackLister helps list PolarisStacks.
type PolarisStackLister interface {
	// List lists all PolarisStacks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PolarisStack, err error)
	// PolarisStacks returns an object that can list and get PolarisStacks.
	PolarisStacks(namespace string) PolarisStackNamespaceLister
	PolarisStackListerExpansion
}

// polarisStackLister implements the PolarisStackLister interface.
type polarisStackLister struct {
	indexer cache.Indexer
}

// NewPolarisStackLister returns a new PolarisStackLister.
func NewPolarisStackLister(indexer cache.Indexer) PolarisStackLister {
	return &polarisStackLister{indexer: indexer}
}

// List lists all PolarisStacks in the indexer.
func (s *polarisStackLister) List(selector labels.Selector) (ret []*v1alpha1.PolarisStack, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolarisStack))
	})
	return ret, err
}

// PolarisStacks returns an object that can list and get PolarisStacks.
func (s *polarisStackLister) PolarisStacks(namespace string) PolarisStackNamespaceLister {
	return polarisStackNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolarisStackNamespaceLister helps list and get PolarisStacks.
type PolarisStackNamespaceLister interface {
	// List lists all PolarisStacks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PolarisStack, err error)
	// Get retrieves the PolarisStack from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PolarisStack, error)
	PolarisStackNamespaceListerExpansion
}

// polarisStackNamespaceLister implements the PolarisStackNamespaceLister
// interface.
type polarisStackNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolarisStacks in the indexer for a given namespace.
func (s polarisStackNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PolarisStack, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolarisStack))
	})
	return ret, err
}

// Get retrieves the PolarisStack from the indexer for a given namespace and name.
func (s polarisStackNamespaceLister) Get(name string) (*v1alpha1.PolarisStack, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("polarisstack"), name)
	}
	return obj.(*v1alpha1.PolarisStack), nil
}
