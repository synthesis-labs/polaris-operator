/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/synthesis-labs/polaris-operator/pkg/apis/polaris/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PolarisSourceRepositoryLister helps list PolarisSourceRepositories.
type PolarisSourceRepositoryLister interface {
	// List lists all PolarisSourceRepositories in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PolarisSourceRepository, err error)
	// PolarisSourceRepositories returns an object that can list and get PolarisSourceRepositories.
	PolarisSourceRepositories(namespace string) PolarisSourceRepositoryNamespaceLister
	PolarisSourceRepositoryListerExpansion
}

// polarisSourceRepositoryLister implements the PolarisSourceRepositoryLister interface.
type polarisSourceRepositoryLister struct {
	indexer cache.Indexer
}

// NewPolarisSourceRepositoryLister returns a new PolarisSourceRepositoryLister.
func NewPolarisSourceRepositoryLister(indexer cache.Indexer) PolarisSourceRepositoryLister {
	return &polarisSourceRepositoryLister{indexer: indexer}
}

// List lists all PolarisSourceRepositories in the indexer.
func (s *polarisSourceRepositoryLister) List(selector labels.Selector) (ret []*v1alpha1.PolarisSourceRepository, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolarisSourceRepository))
	})
	return ret, err
}

// PolarisSourceRepositories returns an object that can list and get PolarisSourceRepositories.
func (s *polarisSourceRepositoryLister) PolarisSourceRepositories(namespace string) PolarisSourceRepositoryNamespaceLister {
	return polarisSourceRepositoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PolarisSourceRepositoryNamespaceLister helps list and get PolarisSourceRepositories.
type PolarisSourceRepositoryNamespaceLister interface {
	// List lists all PolarisSourceRepositories in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PolarisSourceRepository, err error)
	// Get retrieves the PolarisSourceRepository from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PolarisSourceRepository, error)
	PolarisSourceRepositoryNamespaceListerExpansion
}

// polarisSourceRepositoryNamespaceLister implements the PolarisSourceRepositoryNamespaceLister
// interface.
type polarisSourceRepositoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PolarisSourceRepositories in the indexer for a given namespace.
func (s polarisSourceRepositoryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PolarisSourceRepository, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PolarisSourceRepository))
	})
	return ret, err
}

// Get retrieves the PolarisSourceRepository from the indexer for a given namespace and name.
func (s polarisSourceRepositoryNamespaceLister) Get(name string) (*v1alpha1.PolarisSourceRepository, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("polarissourcerepository"), name)
	}
	return obj.(*v1alpha1.PolarisSourceRepository), nil
}
